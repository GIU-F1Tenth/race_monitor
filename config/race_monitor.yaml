race_monitor:
  ros__parameters:
    # ========================================
    # RACE MONITORING PARAMETERS
    # ========================================

    # Start/finish line configuration
    start_line_p1: [0.0, -2.0] # Bottom point of start line [x, y]
    start_line_p2: [0.0, 2.0] # Top point of start line [x, y]
    required_laps: 7 # Number of laps to complete race
    debounce_time: 2.0 # Debounce time for lap detection (seconds)
    output_file: "race_results.json" # CSV file for race results
    frame_id: "map" # Frame ID for visualization

    # Lap detection direction configuration
    lap_detection:
      # Expected crossing direction: "any", "positive", "negative"
      # - "any": Accept crossings in any direction
      # - "positive": Only accept crossings in positive normal direction (right for vertical line)
      # - "negative": Only accept crossings in negative normal direction (left for vertical line)
      expected_direction: "any"
      # Enable direction validation based on vehicle heading
      validate_heading_direction: false
      # Log level for lap detection: "minimal", "normal", "debug"
      log_level: "normal"

    # ========================================
    # DIRECTORY CONFIGURATION
    # ========================================

    # Base directory for data storage
    # Default: "" (uses package's data/ directory)
    # You can specify:
    #   - Empty string "" to use default: <package_share>/data/
    #   - Relative path "custom_dir" resolves to: <package_share>/custom_dir/
    #   - Absolute path "/absolute/path/to/dir" uses as-is
    trajectory_output_directory: ""

    # Graph output directory (relative to trajectory_output_directory)
    graph_output_directory: "graphs" # ========================================
    # RACE ENDING CONDITIONS
    # ========================================

    # Race ending mode: "lap_complete", "crash", "manual"
    # - lap_complete: Race ends when required laps are completed
    # - crash: Race ends when crash is detected
    # - manual: Race continues until node is manually killed
    race_ending_mode: "lap_complete"

    # Crash detection parameters (only used when race_ending_mode is "crash")
    crash_detection:
      enable_crash_detection: true
      # Maximum allowed stationary time before considering crash (seconds)
      max_stationary_time: 5.0
      # Minimum velocity threshold to consider vehicle as moving (m/s)
      min_velocity_threshold: 0.1
      # Maximum allowed time without odometry updates (seconds)
      max_odometry_timeout: 3.0
      # Enable collision detection based on sudden velocity changes
      enable_collision_detection: true
      # Velocity change threshold for collision detection (m/s)
      collision_velocity_threshold: 2.0
      # Time window for collision detection (seconds)
      collision_detection_window: 0.5

    # Manual mode parameters (only used when race_ending_mode is "manual")
    manual_mode:
      # Save intermediate results periodically even if race doesn't end
      save_intermediate_results: true
      # Interval for saving intermediate results (seconds)
      save_interval: 30.0
      # Maximum race duration before automatic safety stop (seconds, 0 = no limit)
      max_race_duration: 0

    # ========================================
    # RESEARCH & ANALYSIS PARAMETERS
    # ========================================

    # Controller identification for research comparison
    controller_name: "" # Name of the controller being tested

    # Smart controller detection settings
    enable_smart_controller_detection: true # Automatically detect controller from topic publishers (only when controller_name is empty)

    experiment_id: "exp_001" # Experiment identifier for this run
    test_description: "Controller performance evaluation and analysis"

    # Auto-shutdown settings
    auto_shutdown_on_race_complete: true # Automatically shutdown node when race is completed
    shutdown_delay_seconds: 5.0 # Delay before shutdown to allow final data processing

    # Advanced metrics for current controller analysis
    enable_advanced_metrics: true # Enable comprehensive metric calculations
    calculate_all_statistics: true # Calculate mean, median, std, min, max (not just RMSE)
    analyze_rotation_errors: true # Include orientation analysis
    enable_geometric_analysis: true # Arc length, curvature analysis
    enable_filtering_analysis: true # Apply and analyze trajectory filtering

    # Analysis evaluation modes
    detailed_lap_analysis: true # Detailed per-lap breakdown
    comparative_analysis: true # Enable comparison
    statistical_significance: true # Calculate statistical significance tests

    # ========================================
    # EVO INTEGRATION PARAMETERS
    # ========================================

    # Enable/disable trajectory evaluation
    enable_trajectory_evaluation: true

    # Evaluation timing options (choose one):
    # Option 1: Time-based evaluation (evaluate every X seconds)
    evaluation_interval_seconds: 0.0

    # Option 2: Lap-based evaluation (evaluate every X laps)
    evaluation_interval_laps: 1 # 0 = disable lap-based evaluation

    # Option 3: Distance-based evaluation (evaluate every X meters)
    evaluation_interval_meters: 0.0 # 0 = disable distance-based evaluation

    # ========================================
    # REFERENCE TRAJECTORY CONFIGURATION
    # ========================================

    # Reference trajectory file path
    # Default: "" (no reference trajectory)
    # You can specify:
    #   - Just filename "ref_trajectory.csv" looks in: <package_share>/ref_trajectory/
    #   - Relative path "custom_dir/traj.csv" resolves to: <package_share>/custom_dir/traj.csv
    #   - Absolute path "/absolute/path/to/trajectory.csv" uses as-is
    #
    # To use: Place your reference trajectory file in race_monitor/ref_trajectory/
    # and set this to the filename, e.g., "ref_trajectory.csv"
    reference_trajectory_file: ""

    # Reference trajectory format: csv, tum, kitti
    reference_trajectory_format: "csv"

    # ========================================
    # ADVANCED FILE OUTPUT FOR RESEARCH
    # ========================================

    # Enhanced data export
    export_to_pandas: true # Export data to pandas DataFrame
    save_detailed_statistics: true # Save comprehensive statistics
    save_filtered_trajectories: true # Save both raw and filtered trajectories
    export_research_summary: true # Generate research-ready summary

    # Research file formats
    output_formats: ["csv", "json", "pickle", "mat"] # Multiple formats for analysis tools
    include_timestamps: false # Include detailed timestamp information
    save_intermediate_results: true # Save results after each lap

    # ========================================
    # TRAJECTORY ANALYSIS SETTINGS
    # ========================================

    # Data storage
    save_trajectories: true

    # Metrics to calculate
    evaluate_smoothness: true # Calculate trajectory smoothness
    evaluate_consistency: true # Calculate trajectory consistency
    evaluate_efficiency: true # Calculate path efficiency metrics
    evaluate_aggressiveness: true # Calculate driving aggressiveness
    evaluate_stability: true # Calculate control stability metrics

    # Advanced EVO metrics
    pose_relations: ["translation_part", "rotation_part", "full_transformation"]
    statistics_types: ["rmse", "mean", "median", "std", "min", "max", "sse"]

    # Filtering options for noise reduction
    apply_trajectory_filtering: true
    filter_types: ["motion", "distance", "angle"]
    filter_parameters:
      motion_threshold: 0.1 # Minimum motion for filtering
      distance_threshold: 0.05 # Distance threshold for filtering
      angle_threshold: 0.1 # Angle threshold for filtering

    # ========================================
    # GRAPH GENERATION SETTINGS
    # ========================================

    # Enable/disable automatic graph generation
    auto_generate_graphs: true
    graph_formats: ["png", "pdf"] # png, pdf, svg, html

    # Plot appearance settings
    plot_figsize: [12.0, 8.0] # Figure size [width, height]
    plot_dpi: 300 # DPI for saved images
    plot_style: "seaborn" # matplotlib style
    plot_color_scheme: "viridis" # Color scheme for multiple trajectories

    # Types of graphs to generate
    generate_trajectory_plots: true # 2D/3D trajectory visualization
    generate_xyz_plots: true # X, Y, Z position over time
    generate_rpy_plots: true # Roll, Pitch, Yaw over time
    generate_speed_plots: true # Velocity analysis
    generate_error_plots: true # APE/RPE error analysis
    generate_metrics_plots: true # Smoothness/consistency over time

    # Advanced plot types (like your provided images)
    generate_error_mapped_plots: true # Error mapped onto trajectory with color coding
    generate_violin_plots: true # Violin plots for error distribution comparison
    generate_3d_vector_plots: true # 3D trajectory plots with directional vectors

    # ========================================
    # COMPUTATIONAL MONITORING SETTINGS
    # ========================================

    # Enable/disable CPU performance monitoring
    enable_computational_monitoring: false
