name: Race Monitor CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  schedule:
    - cron: "0 0 * * *" # daily at midnight UTC

env:
  ROS_DISTRO: humble

jobs:
  python-lint:
    name: Python Code Quality
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt','**/constraints.txt') }}

      - name: Install Python dev dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -c constraints.txt -r requirements.txt

      - name: Lint with flake8
        run: |
          flake8 race_monitor/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 race_monitor/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Type check with mypy
        continue-on-error: true
        run: |
          mypy --ignore-missing-imports \
               --allow-untyped-defs \
               --no-strict-optional \
               --allow-untyped-calls \
               --allow-incomplete-defs \
               race_monitor/ || echo "Type checking completed with warnings"

      - name: Security audit
        continue-on-error: true
        run: |
          safety scan -r requirements.txt --output text

  linux-ros2-build:
    name: Linux ROS2 Build & Package Tests
    runs-on: ubuntu-22.04
    needs: python-lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up ROS 2 Humble
        run: |
          sudo apt update
          sudo apt install -y software-properties-common
          sudo add-apt-repository universe
          sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
          sudo apt update
          sudo apt install -y ros-humble-desktop python3-rosdep

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt','**/constraints.txt') }}

      - name: Cache colcon build (install & build)
        uses: actions/cache@v4
        with:
          path: |
            build
            install
            log
          key: ${{ runner.os }}-colcon-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-colcon-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            python3-colcon-common-extensions \
            build-essential \
            python3-rosdep \
            ros-humble-rclpy \
            ros-humble-std-msgs \
            ros-humble-nav-msgs \
            ros-humble-geometry-msgs \
            ros-humble-visualization-msgs \
            ros-humble-ackermann-msgs \
            ros-humble-tf2-ros \
            ros-humble-tf-transformations \
            python3-transforms3d

      - name: Configure rosdep & install package deps
        run: |
          sudo rosdep init || true
          rosdep update || true
          # Install all package.xml dependencies for this workspace (ignore-src avoids reinstalling local packages)
          rosdep install --from-paths src --ignore-src -r -y || true

      - name: Install Python dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -c constraints.txt -r requirements.txt

      - name: Build package
        run: |
          source /opt/ros/humble/setup.bash
          colcon build --packages-select race_monitor --cmake-args -DCMAKE_BUILD_TYPE=Release

      - name: Run package tests (colcon)
        run: |
          source /opt/ros/humble/setup.bash
          source install/setup.bash || true

          # Run colcon tests if present
          colcon test --packages-select race_monitor --event-handlers console_direct+ || true
          colcon test-result --verbose || true

      - name: Minimal import & diagnostics
        run: |
          source /opt/ros/humble/setup.bash
          source install/setup.bash || true
          python3 - <<'PY'
          import sys
          import importlib
          import numpy as np
          print('Python:', sys.version.splitlines()[0])
          print('NumPy:', np.__version__)
          try:
              import transforms3d
              print('transforms3d:', transforms3d.__version__)
          except Exception as e:
              print('transforms3d import failed:', e)
          try:
              import tf_transformations
              print('tf_transformations available')
          except Exception as e:
              print('tf_transformations import FAILED:', e)
          # Try importing package
          try:
              import race_monitor
              print('race_monitor import: OK')
          except Exception as e:
              print('race_monitor import: FAILED', e)
              raise
          PY

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-ros2-build-${{ github.run_id }}
          path: |
            install/
            build/
          retention-days: 3

  integration-test:
    name: Integration & Launch Tests
    runs-on: ubuntu-22.04
    needs: linux-ros2-build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up ROS 2 Humble
        run: |
          sudo apt update
          sudo apt install -y software-properties-common
          sudo add-apt-repository universe
          sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
          sudo apt update
          sudo apt install -y ros-humble-desktop python3-rosdep

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-ros2-build-${{ github.run_id }}
          path: /workspace/

      - name: Install Python deps for integration
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -c constraints.txt -r requirements.txt

      - name: Source ROS & workspace
        run: |
          source /opt/ros/humble/setup.bash
          if [ -f /workspace/install/setup.bash ]; then
            source /workspace/install/setup.bash
          fi

      - name: Smoke pub/sub test
        run: |
          source /opt/ros/humble/setup.bash
          if [ -f /workspace/install/setup.bash ]; then
            source /workspace/install/setup.bash
          fi

          python3 - <<'PY'
          import rclpy
          from rclpy.node import Node
          from std_msgs.msg import String
          import threading

          received = {'ok': False}

          class TestNode(Node):
              def __init__(self):
                  super().__init__('ci_smoke_test')
                  self.pub = self.create_publisher(String, 'ci_test_topic', 10)
                  self.sub = self.create_subscription(String, 'ci_test_topic', self.cb, 10)

              def cb(self, msg):
                  if msg.data == 'ping':
                      received['ok'] = True


          def spin_node(node):
              rclpy.spin(node)

          rclpy.init()
          node = TestNode()
          thr = threading.Thread(target=spin_node, args=(node,), daemon=True)
          thr.start()

          # publish a message and wait briefly for callback
          for _ in range(5):
              node.pub.publish(String(data='ping'))
              rclpy.spin_once(node, timeout_sec=0.5)

          rclpy.shutdown()
          if not received['ok']:
              raise SystemExit('Smoke test failed: no message loopback')
          print('Smoke test OK')
          PY

      - name: Test launch file (non-blocking, short timeout)
        run: |
          source /opt/ros/humble/setup.bash
          if [ -f /workspace/install/setup.bash ]; then
            source /workspace/install/setup.bash
          fi

          timeout 20s bash -c '
            ros2 launch race_monitor race_monitor.launch.py &
            LAUNCH_PID=$!
            sleep 6
            if kill -0 $LAUNCH_PID 2>/dev/null; then
              echo "Launch started (PID $LAUNCH_PID)"
              ros2 node list || true
              kill $LAUNCH_PID || true
              exit 0
            else
              echo "Launch failed to start"
              exit 1
            fi
          '

      - name: Test node executable (run & detect)
        run: |
          source /opt/ros/humble/setup.bash
          if [ -f /workspace/install/setup.bash ]; then
            source /workspace/install/setup.bash
          fi

          timeout 12s bash -c '
            ros2 run race_monitor race_monitor &
            NODE_PID=$!
            sleep 4
            if kill -0 $NODE_PID 2>/dev/null; then
              echo "Node started (PID $NODE_PID)"
              ros2 node list || true
              kill $NODE_PID || true
              exit 0
            else
              echo "Node failed to start"
              exit 1
            fi
          '
