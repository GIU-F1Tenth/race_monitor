name: Race Monitor CI

on:
  pull_request:
    branches: [main, dev]
  push:
    branches: [main, dev]
    paths:
      - 'Dockerfile'
      - 'requirements.txt'
      - 'constraints.txt'
      - '.github/workflows/ci.yaml'
  workflow_dispatch:

env:
  ROS_DISTRO: humble
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_NAME_LOWERCASE: giu-f1tenth/race_monitor

jobs:
  # Check if Docker files changed
  check-docker-changes:
    name: Check if Docker rebuild needed
    runs-on: ubuntu-22.04
    outputs:
      docker-changed: ${{ steps.filter.outputs.docker }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check for Docker-related changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            docker:
              - 'Dockerfile'
              - 'requirements.txt'
              - 'constraints.txt'

  docker-build:
    name: Build ubuntu-Ros2-Docker Image
    runs-on: ubuntu-22.04
    needs: check-docker-changes
    # Only build if Docker files changed OR workflow was manually triggered
    if: needs.check-docker-changes.outputs.docker-changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate safe Docker tag
        id: image-tag
        run: |
          # Generate a safe tag without slashes
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For PRs, use pr-NUMBER format
            TAG="pr-${{ github.event.pull_request.number }}"
          else
            # For branches, sanitize the ref name
            TAG="${{ github.ref_name }}"
            TAG="${TAG//\//-}"  # Replace / with -
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Generated Docker tag: ${TAG}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWERCASE }}:${{ steps.image-tag.outputs.tag }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          no-cache: true

  python-lint:
    name: Python Code Quality
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt','**/constraints.txt') }}

      - name: Install Python dev dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -c constraints.txt -r requirements.txt

      - name: Lint with flake8
        run: |
          flake8 race_monitor/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 race_monitor/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Type check with mypy
        continue-on-error: true
        run: |
          mypy --ignore-missing-imports \
               --allow-untyped-defs \
               --no-strict-optional \
               --allow-untyped-calls \
               --allow-incomplete-defs \
               race_monitor/ || echo "Type checking completed with warnings"

      - name: Security audit
        continue-on-error: true
        run: |
          echo "Running security audit with pip-audit..."
          pip-audit -r requirements.txt || echo "Security audit completed"

  linux-ros2-build:
    name: Linux ROS2 Build, Test & Integration
    runs-on: ubuntu-22.04
    needs: [python-lint, check-docker-changes, docker-build]
    if: always() && needs.python-lint.result == 'success'
    container:
      # Use the newly built image if available, otherwise fallback to main
      image: ${{ needs.docker-build.result == 'success' && format('ghcr.io/giu-f1tenth/race_monitor:{0}', needs.docker-build.outputs.image-tag) || 'ghcr.io/giu-f1tenth/race_monitor:main' }}
      options: --user root
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache colcon build (install & build)
        uses: actions/cache@v4
        with:
          path: |
            build
            install
            log
          key: ${{ runner.os }}-colcon-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-colcon-

      - name: Set up workspace structure
        run: |
          mkdir -p ws/src/race_monitor
          # Copy all files directly to race_monitor package directory
          shopt -s dotglob
          for item in *; do
            if [ "$item" != "ws" ]; then
              cp -r "$item" ws/src/race_monitor/
            fi
          done
          cd ws

      - name: Build package
        run: |
          cd ws
          source /opt/ros/humble/setup.bash
          colcon build --packages-select race_monitor --cmake-args -DCMAKE_BUILD_TYPE=Release

      - name: Run package tests (colcon)
        run: |
          cd ws
          source /opt/ros/humble/setup.bash
          source install/setup.bash || true

          # Run colcon tests if present
          colcon test --packages-select race_monitor --event-handlers console_direct+ || true
          colcon test-result --verbose || true

      - name: Minimal import & diagnostics
        run: |
          cd ws
          source /opt/ros/humble/setup.bash
          source install/setup.bash || true
          python3 - <<'PY'
          import sys
          import importlib
          import numpy as np
          print('Python:', sys.version.splitlines()[0])
          print('NumPy:', np.__version__)
          try:
              import transforms3d
              print('transforms3d:', transforms3d.__version__)
          except Exception as e:
              print('transforms3d import failed:', e)
          try:
              import tf_transformations
              print('tf_transformations available')
          except Exception as e:
              print('tf_transformations import FAILED:', e)
          # Try importing package
          try:
              import race_monitor
              print('race_monitor import: OK')
          except Exception as e:
              print('race_monitor import: FAILED', e)
              raise
          PY

      - name: ROS2 Integration Tests
        run: |
          cd ws
          source /opt/ros/humble/setup.bash
          source install/setup.bash

          # Smoke pub/sub test
          echo "Running ROS2 pub/sub smoke test..."
          python3 - <<'PY'
          import rclpy
          from rclpy.node import Node
          from std_msgs.msg import String
          import time
          import sys

          try:
              rclpy.init()
              
              class TestNode(Node):
                  def __init__(self):
                      super().__init__('ci_smoke_test')
                      self.pub = self.create_publisher(String, 'ci_test_topic', 10)
                      self.sub = self.create_subscription(String, 'ci_test_topic', self.cb, 10) 
                      self.received = False

                  def cb(self, msg):
                      if msg.data == 'ping':
                          self.received = True

              node = TestNode()
              
              # Give some time for setup
              time.sleep(0.5)
              
              # Publish and check for message reception
              for i in range(5):
                  node.pub.publish(String(data='ping'))
                  rclpy.spin_once(node, timeout_sec=0.5)
                  if node.received:
                      break
                  time.sleep(0.1)

              if not node.received:
                  print('✗ ROS2 pub/sub smoke test failed: no message loopback')
                  sys.exit(1)
              else:
                  print('✓ ROS2 pub/sub smoke test passed')
                  
          except Exception as e:
              print(f'✗ ROS2 pub/sub smoke test failed with error: {e}')
              sys.exit(1)
          finally:
              try:
                  if 'node' in locals():
                      node.destroy_node()
                  if rclpy.ok():
                      rclpy.shutdown()
              except Exception as cleanup_e:
                  print(f'✗ ROS2 cleanup error: {cleanup_e}')
          PY

      - name: Test Launch File
        run: |
          cd ws
          source /opt/ros/humble/setup.bash
          source install/setup.bash

          echo "Testing launch file..."
          timeout 30s bash -c '
            ros2 launch race_monitor race_monitor.launch.py &
            LAUNCH_PID=$!
            sleep 20
            if kill -0 $LAUNCH_PID 2>/dev/null; then
              echo "✓ Launch file started successfully (PID $LAUNCH_PID)"
              ros2 node list || true
              kill $LAUNCH_PID || true
              exit 0
            else
              echo "✗ Launch file failed to start"
              exit 1
            fi
          '

      - name: Test Node Executable
        run: |
          cd ws
          source /opt/ros/humble/setup.bash
          source install/setup.bash

          echo "Testing node executable..."
          timeout 18s bash -c '
            ros2 run race_monitor race_monitor &
            NODE_PID=$!
            sleep 12
            if kill -0 $NODE_PID 2>/dev/null; then
              echo "✓ Node executable started successfully (PID $NODE_PID)"
              ros2 node list || true
              kill $NODE_PID || true
              exit 0
            else
              echo "✗ Node executable failed to start"
              exit 1
            fi
          '

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-ros2-build-${{ github.run_id }}
          path: |
            install/
            build/
          retention-days: 3
