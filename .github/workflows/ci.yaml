name: Race Monitor CI

on:
  pull_request:
    branches: [main, dev]
  push:
    branches: [main, dev]
    paths:
      - 'Dockerfile'
      - 'requirements.txt'
      - 'constraints.txt'
      - '.github/workflows/ci.yaml'
  workflow_dispatch:

env:
  ROS_DISTRO: humble
  REGISTRY: ghcr.io
  IMAGE_NAME: giu-f1tenth/race-monitor-ci

jobs:
  # Check if Docker files changed
  check-docker-changes:
    name: Check if Docker rebuild needed
    runs-on: ubuntu-22.04
    outputs:
      docker-changed: ${{ steps.filter.outputs.docker }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check for Docker-related changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            docker:
              - 'Dockerfile'
              - 'requirements.txt'
              - 'constraints.txt'

  docker-build:
    name: Build ubuntu-Ros2-Docker Image
    runs-on: ubuntu-22.04
    needs: check-docker-changes
    # Only build if Docker files changed OR workflow was manually triggered
    if: needs.check-docker-changes.outputs.docker-changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate safe Docker tag
        id: image-tag
        run: |
          # Generate a safe tag without slashes
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For PRs, use pr-NUMBER format
            TAG="pr-${{ github.event.pull_request.number }}"
          else
            # For branches, sanitize the ref name
            TAG="${{ github.ref_name }}"
            TAG="${TAG//\//-}"  # Replace / with -
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Generated Docker tag: ${TAG}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image-tag.outputs.tag }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          no-cache: true

  python-lint:
    name: Python Code Quality
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt','**/constraints.txt') }}

      - name: Install Python dev dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -c constraints.txt -r requirements.txt

      - name: Lint with flake8
        run: |
          flake8 race_monitor/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 race_monitor/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Type check with mypy
        continue-on-error: true
        run: |
          mypy --ignore-missing-imports \
               --allow-untyped-defs \
               --no-strict-optional \
               --allow-untyped-calls \
               --allow-incomplete-defs \
               race_monitor/ || echo "Type checking completed with warnings"

      - name: Security audit
        continue-on-error: true
        run: |
          echo "Running security audit with pip-audit..."
          pip-audit -r requirements.txt || echo "Security audit completed"

  linux-ros2-build:
    name: Test Race Monitor Pkg
    runs-on: ubuntu-22.04
    needs: [python-lint, check-docker-changes, docker-build]
    # Skip if Docker build was needed but failed, or if python-lint failed
    if: |
      always() && 
      needs.python-lint.result == 'success' &&
      (needs.docker-build.result == 'success' || needs.docker-build.result == 'skipped')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Select and pull Docker image
        id: select-image
        run: |
          # Select Docker image with fallback priority:
          # 1. Newly built image (if docker-build job ran)
          # 2. Default branch tag (e.g., main, master)
          # 3. Latest tag
          # 4. Dev tag
          
          DOCKER_IMAGE="ghcr.io/${{ github.repository_owner }}/race-monitor-ci"
          
          # Try newly built tag first (from current run)
          IMAGE_TAG="${{ needs.docker-build.outputs.image-tag }}"
          
          if [ -z "$IMAGE_TAG" ] || ! docker pull "$DOCKER_IMAGE:$IMAGE_TAG" 2>/dev/null; then
            echo "Newly built image not available, trying default branch..."
            IMAGE_TAG="${{ github.event.repository.default_branch }}"
            
            if ! docker pull "$DOCKER_IMAGE:$IMAGE_TAG" 2>/dev/null; then
              echo "Default branch image not available, trying latest..."
              IMAGE_TAG="latest"
              
              if ! docker pull "$DOCKER_IMAGE:$IMAGE_TAG" 2>/dev/null; then
                echo "Latest image not available, trying dev..."
                IMAGE_TAG="dev"
                
                if ! docker pull "$DOCKER_IMAGE:$IMAGE_TAG" 2>/dev/null; then
                  echo "❌ No Docker image available. Please run workflow_dispatch to build base image."
                  exit 1
                fi
              fi
            fi
          fi
          
          echo "Using Docker image: $DOCKER_IMAGE:$IMAGE_TAG"
          echo "image=$DOCKER_IMAGE:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Set up workspace in container
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            ${{ steps.select-image.outputs.image }} \
            bash -c '
              mkdir -p ws/src/race_monitor
              shopt -s dotglob
              for item in *; do
                [ "$item" != "ws" ] && cp -r "$item" ws/src/race_monitor/
              done
            '

      - name: Verify ROS2 and install dependencies
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace/ws \
            -e ROS_DISTRO=humble \
            ${{ steps.select-image.outputs.image }} \
            bash -c '
              source /opt/ros/humble/setup.bash
              [ ! -d "/etc/ros/rosdep" ] && (rosdep init || true)
              rosdep update || true
              python3 -c "import tf_transformations" 2>/dev/null || pip3 install transforms3d
            '

      - name: Build package
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace/ws \
            -e ROS_DISTRO=humble \
            ${{ steps.select-image.outputs.image }} \
            bash -c '
              source /opt/ros/humble/setup.bash
              colcon build --packages-select race_monitor --cmake-args -DCMAKE_BUILD_TYPE=Release --event-handlers console_direct+
            '

      - name: Run colcon tests
        continue-on-error: true
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace/ws \
            -e ROS_DISTRO=humble \
            ${{ steps.select-image.outputs.image }} \
            bash -c '
              source /opt/ros/humble/setup.bash
              source install/setup.bash
              colcon test --packages-select race_monitor --event-handlers console_direct+ || true
              colcon test-result --verbose || true
            '

      - name: Test Python imports
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace/ws \
            -e ROS_DISTRO=humble \
            ${{ steps.select-image.outputs.image }} \
            bash -c 'source /opt/ros/humble/setup.bash && source install/setup.bash && python3 -c "import sys, numpy, transforms3d, tf_transformations, race_monitor; print(\"✓ All imports successful\")"'

      - name: Test ROS2 integration
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace/ws \
            -e ROS_DISTRO=humble \
            ${{ steps.select-image.outputs.image }} \
            bash -c 'source /opt/ros/humble/setup.bash && source install/setup.bash && python3 -c "import rclpy; from std_msgs.msg import String; rclpy.init(); print(\"✓ ROS2 integration test passed\"); rclpy.shutdown()"'

      - name: Test launch file
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace/ws \
            -e ROS_DISTRO=humble \
            ${{ steps.select-image.outputs.image }} \
            bash -c '
              source /opt/ros/humble/setup.bash
              source install/setup.bash
              timeout 30s bash -c "
                ros2 launch race_monitor race_monitor.launch.py &
                LAUNCH_PID=\$!
                sleep 20
                if kill -0 \$LAUNCH_PID 2>/dev/null; then
                  echo \"✓ Launch file started successfully (PID \$LAUNCH_PID)\"
                  kill \$LAUNCH_PID || true
                  exit 0
                else
                  echo \"✗ Launch file failed to start\"
                  exit 1
                fi
              "
            '

      - name: Test node executable
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace/ws \
            -e ROS_DISTRO=humble \
            ${{ steps.select-image.outputs.image }} \
            bash -c '
              source /opt/ros/humble/setup.bash
              source install/setup.bash
              timeout 18s bash -c "
                ros2 run race_monitor race_monitor &
                NODE_PID=\$!
                sleep 12
                if kill -0 \$NODE_PID 2>/dev/null; then
                  echo \"✓ Node executable started successfully (PID \$NODE_PID)\"
                  kill \$NODE_PID || true
                  exit 0
                else
                  echo \"✗ Node executable failed to start\"
                  exit 1
                fi
              "
            '

      - name: Set up workspace structure
        run: |
          mkdir -p ws/src/race_monitor
          # Copy all files directly to race_monitor package directory
          shopt -s dotglob
          for item in *; do
            if [ "$item" != "ws" ]; then
              cp -r "$item" ws/src/race_monitor/
            fi
          done

      - name: Verify ROS2 environment
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            --user root \
            ${{ steps.select-image.outputs.image }} \
            bash -c '
              echo "=== Starting ROS2 Environment Verification ==="
              
              # Verify rosdep is initialized
              if [ ! -d "/etc/ros/rosdep" ]; then
                echo "rosdep not initialized, initializing now..."
                rosdep init || echo "rosdep already initialized"
              fi
              
              # Update rosdep
              rosdep update || true
              
              # Test tf_transformations import
              source /opt/ros/humble/setup.bash
              python3 -c "import tf_transformations; print(\"✓ tf_transformations available\")" || {
                echo "Installing transforms3d as alternative..."
                pip3 install transforms3d
              }
              
              echo "=== ROS2 Environment Verification Complete ==="
            '

      - name: Build package in container
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace/ws \
            -e ROS_DISTRO=humble \
            ${{ steps.select-image.outputs.image }} \
            bash -c '
              source /opt/ros/humble/setup.bash
              
              echo "=== Building race_monitor package ==="
              colcon build --packages-select race_monitor --cmake-args -DCMAKE_BUILD_TYPE=Release --event-handlers console_direct+
              
              echo "=== Build completed ==="
            '

      - name: Run package tests
        continue-on-error: true
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace/ws \
            -e ROS_DISTRO=humble \
            ${{ steps.select-image.outputs.image }} \
            bash -c '
              source /opt/ros/humble/setup.bash
              source install/setup.bash
              
              colcon test --packages-select race_monitor --event-handlers console_direct+ || true
              colcon test-result --verbose || true
            '

      - name: Test Python imports
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace/ws \
            -e ROS_DISTRO=humble \
            ${{ steps.select-image.outputs.image }} \
            bash -c '
              source /opt/ros/humble/setup.bash
              source install/setup.bash
              
              python3 -c "import numpy, transforms3d, race_monitor; print(\"✓ All imports successful\")"
            '

      - name: Test ROS2 integration
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace/ws \
            -e ROS_DISTRO=humble \
            ${{ steps.select-image.outputs.image }} \
            bash -c '
              source /opt/ros/humble/setup.bash
              source install/setup.bash
              
              python3 -c "import rclpy; from std_msgs.msg import String; rclpy.init(); print(\"✓ ROS2 integration test passed\"); rclpy.shutdown()"
            '

      - name: Test launch file
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace/ws \
            -e ROS_DISTRO=humble \
            ${{ steps.select-image.outputs.image }} \
            bash -c '
              source /opt/ros/humble/setup.bash
              source install/setup.bash
              
              timeout 30s bash -c "
                ros2 launch race_monitor race_monitor.launch.py &
                LAUNCH_PID=\$!
                sleep 20
                if kill -0 \$LAUNCH_PID 2>/dev/null; then
                  echo \"✓ Launch file started successfully\"
                  kill \$LAUNCH_PID || true
                  exit 0
                else
                  echo \"✗ Launch file failed to start\"
                  exit 1
                fi
              "
            '

      - name: Test node executable
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace/ws \
            -e ROS_DISTRO=humble \
            ${{ steps.select-image.outputs.image }} \
            bash -c '
              source /opt/ros/humble/setup.bash
              source install/setup.bash
              
              timeout 18s bash -c "
                ros2 run race_monitor race_monitor &
                NODE_PID=\$!
                sleep 12
                if kill -0 \$NODE_PID 2>/dev/null; then
                  echo \"✓ Node executable started successfully\"
                  kill \$NODE_PID || true
                  exit 0
                else
                  echo \"✗ Node executable failed to start\"
                  exit 1
                fi
              "
            '

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-ros2-build-${{ github.run_id }}
          path: ws/install/
          retention-days: 3
